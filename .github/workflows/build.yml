name: Build

on:
- push

jobs:
  build:
    strategy:
      matrix:
        os:
        - macOS-latest
        - ubuntu-20.04
        - windows-2019
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@master
    # --- Linux
    - name: Install Dependencies (Linux)
      if: startsWith(matrix.os, 'ubuntu-')
      run: sudo apt install libpcap-dev
    # --- Windows
    - uses: seanmiddleditch/gha-setup-vsdevenv@8c6bbf80998779f2bba87b1452832e561b65fd57
      if: startsWith(matrix.os, 'windows-')
    - name: Install Npcap SDK (Windows)
      if: startsWith(matrix.os, 'windows-')
      run: |
        curl -O https://nmap.org/npcap/dist/npcap-sdk-1.06.zip
        Expand-Archive npcap-sdk-1.06.zip
        mv npcap-sdk-1.06 C:/npcap-sdk
        echo "INCLUDE=C:\npcap-sdk\include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "LIB=C:\npcap-sdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "LIBPATH=C:\npcap-sdk\Lib\x64;$env:LIBPATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Copy-Item "C:\npcap-sdk\Lib\x64\wpcap.lib" "C:\npcap-sdk\Lib\x64\pcap.lib"
    # from https://github.com/actions/virtual-environments/issues/1652#issuecomment-735446611
    - name: Install Swift (Windows)
      if: startsWith(matrix.os, 'windows-')
      run: |
        Install-Binary -Url "https://swift.org/builds/development/windows10/swift-DEVELOPMENT-SNAPSHOT-2021-02-18-a/swift-DEVELOPMENT-SNAPSHOT-2021-02-18-a-windows10.exe" -Name "installer.exe" -ArgumentList ("-q")
    - name: Set Environment Variables (Windows)
      if: startsWith(matrix.os, 'windows-')
      run: |
        echo "SDKROOT=C:\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "DEVELOPER_DIR=C:\Library\Developer" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "C:\Library\Swift-development\bin;C:\Library\icu-67\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Install Supporting Files (Windows)
      if: startsWith(matrix.os, 'windows-')
      run: |
        Copy-Item "$env:SDKROOT\usr\share\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
        Copy-Item "$env:SDKROOT\usr\share\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
        Copy-Item "$env:SDKROOT\usr\share\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
        Copy-Item "$env:SDKROOT\usr\share\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"    # --- Shared
    # --- Shared
    - run: swift build -c release
    # Generate Artifact
    - name: Prepare for Artifact
      run: |
        mkdir -p artifact/AUEtherCapture
    - name: Copy Executable (Windows)
      if: startsWith(matrix.os, 'windows-')
      run: cp .build/release/AUEtherCapture.exe artifact/AUEtherCapture/
    - name: Copy Executable (Linux)
      if: startsWith(matrix.os, 'ubuntu-')
      run: cp .build/release/AUEtherCapture artifact/AUEtherCapture
    - name: Copy Executable (macOS)
      if: startsWith(matrix.os, 'macOS-')
      run: cp .build/release/AUEtherCapture artifact/AUEtherCapture
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Artifact.${{ matrix.os }}
        path: artifact
        if-no-files-found: error